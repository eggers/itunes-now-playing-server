'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iTunes = exports.FILTER = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

var _osLocale = require('os-locale');

var _osLocale2 = _interopRequireDefault(_osLocale);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FILTER = exports.FILTER = {
  ALL: '',
  SONG: '&entity=song'
};
var URL = 'https://itunes.apple.com/search?term=';
var suffix = '&country=';

var ITunes = function () {
  function ITunes() {
    _classCallCheck(this, ITunes);

    this.filter = FILTER.ALL;
  }

  _createClass(ITunes, [{
    key: 'currentCountry',
    value: function currentCountry() {
      var locale = _osLocale2.default.sync();
      var country = locale.split('_')[1];
      return country;
    }
  }, {
    key: 'fetch',
    value: function fetch(query) {
      var _this = this;

      var country = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.currentCountry();

      return new Promise(function (resolve, reject) {
        var destination = '' + URL + encodeURIComponent(query) + suffix + country + _this.filter;
        (0, _request2.default)(destination, function (error, response, body) {
          if (!error && response.statusCode == 200) {
            resolve(JSON.parse(body));
          } else {
            reject(error);
          }
        });
      });
    }
  }]);

  return ITunes;
}();

var iTunes = exports.iTunes = new ITunes();;